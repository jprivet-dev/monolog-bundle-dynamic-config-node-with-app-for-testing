# Default configuration for extension with alias: "monolog"
monolog:
    use_microseconds:     true
    channels:             []
    handlers:

        # Examples:
        # syslog:              { type: stream, path: /var/log/symfony.log, level: ERROR, bubble: 'false', formatter: my_formatter }
        # main:                { type: fingers_crossed, action_level: WARNING, buffer_size: 30, handler: custom }
        # custom:              { type: service, id: my_handler }

        # Prototype
        name:
            type:                 ~ # Required

            # Defines the processing order; handlers with a higher priority value are executed first.
            priority:             0

            # Level name or int value, defaults to DEBUG.
            level:                DEBUG

            # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
            bubble:               true

            # When true, a full stack trace is included in the log record, especially for errors and exceptions.
            include_stacktraces:  false

            # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
            nested:               false

            # The formatter used to format the log records. Can be a service ID or a formatter configuration.
            formatter:            ~
            path:                 '%kernel.logs_dir%/%kernel.environment%.log'
            file_permission:      null
            use_locking:          false
            process_psr_3_messages:
                enabled:              null
                date_format:          ~
                remove_used_context_fields: ~
            console_formater_options: ~ # Deprecated (Since symfony/monolog-bundle 3.7: "monolog.handlers.name.console_formater_options" is deprecated, use "monolog.handlers.name.console_formatter_options" instead.)
            console_formatter_options: []
            publisher:
                id:                   ~
                hostname:             ~
                port:                 12201
                chunk_size:           1420

            # Files to keep, defaults to zero (infinite).
            max_files:            0
            filename_format:      '{filename}-{date}'
            date_format:          Y-m-d
            mongo:
                id:                   ~

                # Database host name, optional if id is given.
                host:                 ~
                port:                 27017

                # Database user name
                user:                 ~

                # Mandatory only if user is present.
                pass:                 ~
                database:             monolog
                collection:           logs
            elasticsearch:
                id:                   ~

                # Elastic search host name. Do not prepend with http(s)://.
                host:                 ~
                port:                 9200
                transport:            Http
                user:                 null
                password:             null
            index:                monolog
            document_type:        logs
            ignore_error:         false
            redis:

                # Optional if host is given.
                id:                   ~
                host:                 ~
                password:             null
                port:                 6379
                database:             0
                key_name:             monolog_redis
            predis:

                # Optional if host is given.
                id:                   ~

                # tcp://10.0.0.1:6379
                host:                 ~

            # The wrapped handler's name.
            handler:              ~

            # Minimum level or service id to activate the handler, defaults to WARNING.
            action_level:         WARNING

            # Bool to disable buffering once the handler has been activated, defaults to true.
            stop_buffering:       true

            # Level name or int value for messages to always flush, disabled by default.
            passthru_level:       null

            # If set, the strategy will be changed to one that excludes 404s coming from URLs matching any of those patterns.
            excluded_404s:        []

            # If set, the strategy will be changed to one that excludes specific HTTP codes (requires Symfony Monolog bridge 4.1+).
            excluded_http_codes:

                # Prototype
                -
                    code:                 ~
                    urls:                 []
            buffer_size:          0

            # List of levels to accept
            accepted_levels:      []

            # Minimum level to accept (only used if accepted_levels not specified).
            min_level:            DEBUG

            # Maximum level to accept (only used if accepted_levels not specified).
            max_level:            EMERGENCY
            flush_on_overflow:    false
            time:                 60
            deduplication_level:  400
            store:                null
            members:              []
            ident:                false
            facility:             user
            logopts:              1
            host:                 null
            port:                 514
            from_email:           ~
            to_email:             []
            subject:              ~
            content_type:         null
            mailer:               null
            email_prototype:
                id:                   ~ # Required
                method:               null
            lazy:                 true
            headers:              []
            verbosity_levels:
                VERBOSITY_QUIET:      ERROR
                VERBOSITY_NORMAL:     WARNING
                VERBOSITY_VERBOSE:    NOTICE
                VERBOSITY_VERY_VERBOSE: INFO
                VERBOSITY_DEBUG:      DEBUG
            channels:
                type:                 ~
                elements:             []
            connection_string:    ~
            timeout:              ~
            connection_timeout:   ~
            persistent:           ~

            # Telegram bot access token provided by BotFather.
            token:                ~
            user:                 ~
            title:                null
            dsn:                  ~
            client_id:            null
            auto_log_stacks:      false
            release:              null
            environment:          null
            fill_extra_context:   false
            hub_id:               null
            app_name:             null
            room:                 ~
            message_format:       text
            api_version:          null
            notify:               false
            nickname:             Monolog
            use_ssl:              true

            # Telegram channel name.
            channel:              null
            bot_name:             Monolog
            use_attachment:       true
            use_short_attachment: false
            include_extra:        false
            icon_emoji:           null
            webhook_url:          ~
            team:                 ~
            url:                  ~
            exchange:             ~
            exchange_name:        log
            message_type:         0
            tags:                 []
            region:               ~
            source:               ~
            id:                   ~

            # Config values from https://github.com/rollbar/rollbar-php#configuration-reference.
            config:               []

            # Optional the kind of formatting that is used for the message.
            parse_mode:           null

            # Disables link previews for links in the message.
            disable_webpage_preview: null

            # Sends the message silently. Users will receive a notification with no sound.
            disable_notification: null

            # Split messages longer than 4096 bytes into multiple messages.
            split_long_messages:  false

            # Adds a 1sec delay/sleep between sending split messages.
            delay_between_messages: false
            factor:               1

            # [Output Handlers] Writes log records to a specified stream or file.
            type_stream:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                path:                 '%kernel.logs_dir%/%kernel.environment%.log'
                file_permission:      null
                use_locking:          false

            # [Output Handlers] Writes log records to the console (Symfony Console output).
            type_console:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                process_psr_3_messages:
                    enabled:              null
                    date_format:          ~
                    remove_used_context_fields: ~
                console_formatter_options: []

            # [Output Handlers] Sends log records to FirePHP in the browser console.
            type_firephp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Sends log records to the browser JavaScript console.
            type_browser_console:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Sends log records to a Graylog Extended Log Format (GELF) server.
            type_gelf:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                publisher:
                    id:                   ~
                    hostname:             ~
                    port:                 12201
                    chunk_size:           1420

            # [Output Handlers] Sends log records to the ChromePHP extension.
            type_chromephp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Writes log records to files that are rotated daily.
            type_rotating_file:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                path:                 '%kernel.logs_dir%/%kernel.environment%.log'

                # Files to keep, defaults to zero (infinite).
                max_files:            0
                file_permission:      null
                use_locking:          false
                filename_format:      '{filename}-{date}'
                date_format:          Y-m-d

            # [Output Handlers] Writes log records to a MongoDB database.
            type_mongo:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                mongo:
                    id:                   ~

                    # Database host name, optional if id is given.
                    host:                 ~
                    port:                 27017

                    # Database user name
                    user:                 ~

                    # Mandatory only if user is present.
                    pass:                 ~
                    database:             monolog
                    collection:           logs

            # [Output Handlers] Writes log records to an Elasticsearch server.
            type_elasticsearch:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                elasticsearch:
                    id:                   ~

                    # Elastic search host name, with scheme (e.g. "https://127.0.0.1:9200").
                    host:                 ~
                    port:                 9200
                    transport:            Http
                    user:                 null
                    password:             null
                index:                monolog
                document_type:        logs
                ignore_error:         false

            # [Output Handlers] Writes log records to an Elasticsearch server using the Elastica client.
            type_elastica:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                elasticsearch:
                    id:                   ~

                    # Elastic search host name. Do not prepend with http(s)://.
                    host:                 ~
                    port:                 9200
                    transport:            Http
                    user:                 null
                    password:             null
                index:                monolog
                document_type:        logs
                ignore_error:         false

            # [Output Handlers] Writes log records to a Redis server.
            type_redis:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                redis:

                    # Optional if host is given.
                    id:                   ~
                    host:                 ~
                    password:             null
                    port:                 6379
                    database:             0
                    key_name:             monolog_redis

            # [Output Handlers] Writes log records to a Redis server using Predis.
            type_predis:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                predis:

                    # Optional if host is given.
                    id:                   ~

                    # tcp://10.0.0.1:6379
                    host:                 ~

            # [Buffering Wrappers] Buffers log records and flushes them to a nested handler when a specific action level is reached. It requires a nested handler.
            type_fingers_crossed:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # The wrapped handler's name.
                handler:              ~

                # Minimum level or service id to activate the handler, defaults to WARNING.
                action_level:         WARNING

                # Bool to disable buffering once the handler has been activated, defaults to true.
                stop_buffering:       true

                # Level name or int value for messages to always flush, disabled by default.
                passthru_level:       null

                # If set, the strategy will be changed to one that excludes 404s coming from URLs matching any of those patterns.
                excluded_404s:        []

                # If set, the strategy will be changed to one that excludes specific HTTP codes (requires Symfony Monolog bridge 4.1+).
                excluded_http_codes:

                    # Prototype
                    -
                        code:                 ~
                        urls:                 []

                # Defaults to 0 (unlimited).
                buffer_size:          0

            # [Filtering Wrappers] Passes log records to a nested handler only if their level matches predefined criteria. It requires a nested handler.
            type_filter:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # The wrapped handler's name.
                handler:              ~

                # List of levels to accept
                accepted_levels:      []

                # Minimum level to accept (only used if accepted_levels not specified).
                min_level:            DEBUG

                # Maximum level to accept (only used if accepted_levels not specified).
                max_level:            EMERGENCY

            # [Buffering Wrappers] Accumulates log records and flushes them to a nested handler under specific conditions (e.g., buffer full, shutdown). It requires a nested handler.
            type_buffer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # The wrapped handler's name.
                handler:              ~
                buffer_size:          0
                flush_on_overflow:    false

            # [Deduplication Wrappers] Prevents duplicate log records from being sent to a nested handler within a defined time frame. It requires a nested handler.
            type_deduplication:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # The wrapped handler's name.
                handler:              ~
                time:                 60
                deduplication_level:  400
                store:                null

            # [Grouping Wrappers] Sends all log records to multiple nested handlers simultaneously. It requires one or more nested handlers.
            type_group:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                members:              []

            # [Grouping Wrappers] Attempts to send log records to the first working nested handler in a list, falling back to others if failures occur. It requires one or more nested handlers.
            type_whatfailuregroup:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                members:              []

            # [Grouping Wrappers] Sends log records to the first nested handler, and if it fails, falls back to the next, similar to WhatFailureGroupHandler. It requires one or more nested handlers.
            type_fallbackgroup:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                members:              []

            # [Output Handlers] Sends log records to the syslogd system logger.
            type_syslog:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                ident:                false
                facility:             user
                logopts:              1

            # [Output Handlers] Sends log records to a remote syslogd server via UDP.
            type_syslogudp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                ident:                false
                facility:             user
                logopts:              1
                host:                 null
                port:                 514

            # [Output Handlers] Sends log records via SwiftMailer.
            type_swift_mailer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                from_email:           ~
                to_email:             []
                subject:              ~
                content_type:         null
                mailer:               null
                email_prototype:
                    id:                   ~ # Required
                    method:               null
                lazy:                 true

            # [Output Handlers] Sends log records via PHP's native mail() function.
            type_native_mailer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                from_email:           ~
                to_email:             []
                subject:              ~
                headers:              []

            # [Output Handlers] Sends log records via Symfony Mailer.
            type_symfony_mailer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                from_email:           ~
                to_email:             []
                subject:              ~
                content_type:         null
                headers:              []
                mailer:               null
                email_prototype:
                    id:                   ~ # Required
                    method:               null

            # [Filtering Wrappers] Only activates a nested handler if the Symfony Console verbosity level is sufficient. It requires a nested handler.
            type_verbosity_levels:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                verbosity_levels:
                    VERBOSITY_QUIET:      ERROR
                    VERBOSITY_NORMAL:     WARNING
                    VERBOSITY_VERBOSE:    NOTICE
                    VERBOSITY_VERY_VERBOSE: INFO
                    VERBOSITY_DEBUG:      DEBUG

            # [Filtering Wrappers] Passes log records to a nested handler only if they belong to specific Monolog channels. It requires a nested handler.
            type_channels:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                channels:
                    type:                 ~
                    elements:             []

            # [Output Handlers] Sends log records over a network socket.
            type_socket:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                connection_string:    ~
                timeout:              ~
                connection_timeout:   ~
                persistent:           ~

            # [Output Handlers] Sends log records as Pushover notifications.
            type_pushover:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                token:                ~
                user:                 ~
                title:                null
                timeout:              ~
                connection_timeout:   ~

            # [Output Handlers] Sends log records to a Sentry server (Raven client).
            type_raven:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                dsn:                  ~
                client_id:            null
                auto_log_stacks:      false
                release:              null
                environment:          null

            # [Output Handlers] Sends log records to a Sentry server (Sentry SDK).
            type_sentry:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                fill_extra_context:   false
                dsn:                  ~
                hub_id:               null
                client_id:            null
                release:              null
                environment:          null

            # [Output Handlers] Sends log records to New Relic.
            type_newrelic:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                app_name:             null

            # [Output Handlers] Sends log records to HipChat.
            type_hipchat:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                room:                 ~
                message_format:       text
                api_version:          null
                notify:               false
                nickname:             Monolog
                token:                ~
                use_ssl:              true
                host:                 null
                timeout:              ~
                connection_timeout:   ~

            # [Output Handlers] Sends log records to Slack via a custom API token.
            type_slack:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # Channel name (with starting #).
                channel:              null
                bot_name:             Monolog
                use_attachment:       true
                use_short_attachment: false
                include_extra:        false
                icon_emoji:           null

                # Slack api token
                token:                ~
                timeout:              ~
                connection_timeout:   ~

            # [Output Handlers] Sends log records to Slack via a webhook.
            type_slackwebhook:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                channel:              null
                bot_name:             Monolog
                use_attachment:       true
                use_short_attachment: false
                include_extra:        false
                icon_emoji:           null
                webhook_url:          ~

            # [Output Handlers] Sends log records to Slack via a Slackbot integration.
            type_slackbot:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                channel:              null
                team:                 ~
                token:                ~

            # [Output Handlers] Sends log records to a Cube server.
            type_cube:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                url:                  ~

            # [Output Handlers] publishes log records to an AMQP exchange.
            type_amqp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                exchange:             ~
                exchange_name:        log

            # [Output Handlers] Sends log records to PHP's error_log function.
            type_error_log:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                message_type:         0

            # [Output Handlers] Discards all log records, effectively doing nothing.
            type_null:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Primarily used for testing, collecting log records in memory.
            type_test:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Sends all log records to the Symfony debug bar.
            type_debug:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Sends log records to Loggly.
            type_loggly:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                token:                ~
                tags:                 []

            # [Output Handlers] Sends log records to Logentries.
            type_logentries:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                token:                ~
                use_ssl:              true
                timeout:              ~
                connection_timeout:   ~

            # [Output Handlers] Sends log records to InsightOps (formerly Logentries).
            type_insightops:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                token:                ~
                region:               ~
                use_ssl:              true

            # [Output Handlers] Sends log records to Flowdock.
            type_flowdock:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                token:                ~
                source:               ~

            # [Output Handlers] Sends log records to Rollbar.
            type_rollbar:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # RollbarNotifier service (mandatory if token is not provided).
                id:                   ~

                # Rollbar api token (skip if you provide a RollbarNotifier service id).
                token:                ~

                # Config values from https://github.com/rollbar/rollbar-php#configuration-reference.
                config:               []

            # [Output Handlers] Sends log records to the Symfony VarDumper server for real-time debugging.
            type_server_log:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # [Output Handlers] Sends log records as Telegram messages.
            type_telegram:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # Telegram channel name.
                channel:              null

                # Telegram bot access token provided by BotFather.
                token:                ~

                # Optional the kind of formatting that is used for the message.
                parse_mode:           null

                # Disables link previews for links in the message.
                disable_webpage_preview: null

                # Sends the message silently. Users will receive a notification with no sound.
                disable_notification: null

                # Split messages longer than 4096 bytes into multiple messages.
                split_long_messages:  false

                # Adds a 1sec delay/sleep between sending split messages.
                delay_between_messages: false

            # [Sampling Wrappers] Only passes a fraction of log records to a nested handler based on a configured factor. It requires a nested handler.
            type_sampling:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

                # The wrapped handler's name.
                handler:              ~
                factor:               1

            # [Output Handlers] references an existing service as the Monolog handler.
            type_service:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                id:                   ~

