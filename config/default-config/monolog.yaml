# Default configuration for extension with alias: "monolog"
monolog:
    use_microseconds:     true
    channels:             []
    handlers:

        # Examples:
        # syslog:              { type: stream, path: /var/log/symfony.log, level: ERROR, bubble: 'false', formatter: my_formatter }
        # main:                { type: fingers_crossed, action_level: WARNING, buffer_size: 30, handler: custom }
        # custom:              { type: service, id: my_handler }

        # Prototype
        name:
            type:                 ~ # Required
            id:                   ~
            priority:             0
            level:                DEBUG
            bubble:               true
            app_name:             null
            fill_extra_context:   false
            include_stacktraces:  false
            process_psr_3_messages:
                enabled:              null
                date_format:          ~
                remove_used_context_fields: ~
            path:                 '%kernel.logs_dir%/%kernel.environment%.log'
            file_permission:      null
            use_locking:          false
            filename_format:      '{filename}-{date}'
            date_format:          Y-m-d
            ident:                false
            logopts:              1
            facility:             user
            max_files:            0
            action_level:         WARNING
            activation_strategy:  null
            stop_buffering:       true
            passthru_level:       null
            excluded_404s:        []
            excluded_http_codes:

                # Prototype
                -
                    code:                 ~
                    urls:                 []
            accepted_levels:      []
            min_level:            DEBUG
            max_level:            EMERGENCY
            buffer_size:          0
            flush_on_overflow:    false
            handler:              ~
            url:                  ~
            exchange:             ~
            exchange_name:        log
            room:                 ~
            message_format:       text
            api_version:          null
            channel:              null
            bot_name:             Monolog
            use_attachment:       true
            use_short_attachment: false
            include_extra:        false
            icon_emoji:           null
            webhook_url:          ~
            team:                 ~
            notify:               false
            nickname:             Monolog
            token:                ~
            region:               ~
            source:               ~
            use_ssl:              true
            user:                 ~
            title:                null
            host:                 null
            port:                 514
            config:               []
            members:              []
            connection_string:    ~
            timeout:              ~
            time:                 60
            deduplication_level:  400
            store:                null
            connection_timeout:   ~
            persistent:           ~
            dsn:                  ~
            hub_id:               null
            client_id:            null
            auto_log_stacks:      false
            release:              null
            environment:          null
            message_type:         0
            parse_mode:           null
            disable_webpage_preview: null
            disable_notification: null
            split_long_messages:  false
            delay_between_messages: false
            factor:               1
            tags:                 []
            console_formater_options: ~ # Deprecated (Since symfony/monolog-bundle 3.7: "monolog.handlers.name.console_formater_options" is deprecated, use "monolog.handlers.name.console_formatter_options" instead.)
            console_formatter_options: []
            formatter:            ~
            nested:               false
            publisher:
                id:                   ~
                hostname:             ~
                port:                 12201
                chunk_size:           1420
            mongo:
                id:                   ~
                host:                 ~
                port:                 27017
                user:                 ~
                pass:                 ~
                database:             monolog
                collection:           logs
            elasticsearch:
                id:                   ~
                host:                 ~
                port:                 9200
                transport:            Http
                user:                 null
                password:             null
            index:                monolog
            document_type:        logs
            ignore_error:         false
            redis:
                id:                   ~
                host:                 ~
                password:             null
                port:                 6379
                database:             0
                key_name:             monolog_redis
            predis:
                id:                   ~
                host:                 ~
            from_email:           ~
            to_email:             []
            subject:              ~
            content_type:         null
            headers:              []
            mailer:               null
            email_prototype:
                id:                   ~ # Required
                method:               null
            lazy:                 true
            verbosity_levels:
                VERBOSITY_QUIET:      ERROR
                VERBOSITY_NORMAL:     WARNING
                VERBOSITY_VERBOSE:    NOTICE
                VERBOSITY_VERY_VERBOSE: INFO
                VERBOSITY_DEBUG:      DEBUG
            channels:
                type:                 ~
                elements:             []

            # "stream" type handler (one type of handler per name and per environment).
            type_stream:

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG
                bubble:               true
                path:                 '%kernel.logs_dir%/%kernel.environment%.log'
                file_permission:      null
                use_locking:          false

                # All handlers can also be marked with `nested: true` to make sure they are never added explicitly to the stack.
                nested:               false

            # "console" type handler (one type of handler per name and per environment).
            type_console:         []

            # "firephp" type handler (one type of handler per name and per environment).
            type_firephp:         []

            # "browser_console" type handler (one type of handler per name and per environment).
            type_browser_console: []

            # "gelf" type handler (one type of handler per name and per environment).
            type_gelf:
                publisher:
                    id:                   ~
                    hostname:             ~
                    port:                 12201
                    chunk_size:           1420

            # "chromephp" type handler (one type of handler per name and per environment).
            type_chromephp:       []

            # "rotating_file" type handler (one type of handler per name and per environment).
            type_rotating_file:   []

            # "mongo" type handler (one type of handler per name and per environment).
            type_mongo:
                mongo:
                    id:                   ~
                    host:                 ~
                    port:                 27017
                    user:                 ~
                    pass:                 ~
                    database:             monolog
                    collection:           logs

            # "elasticsearch" type handler (one type of handler per name and per environment).
            type_elasticsearch:
                elasticsearch:
                    id:                   ~
                    host:                 ~
                    port:                 9200
                    transport:            Http
                    user:                 null
                    password:             null
                index:                monolog
                document_type:        logs
                ignore_error:         false

            # "elastica" type handler (one type of handler per name and per environment).
            type_elastica:        []

            # "redis" type handler (one type of handler per name and per environment).
            type_redis:
                redis:
                    id:                   ~
                    host:                 ~
                    password:             null
                    port:                 6379
                    database:             0
                    key_name:             monolog_redis

            # "predis" type handler (one type of handler per name and per environment).
            type_predis:
                predis:
                    id:                   ~
                    host:                 ~

            # "fingers_crossed" type handler (one type of handler per name and per environment).
            type_fingers_crossed: []

            # "filter" type handler (one type of handler per name and per environment).
            type_filter:          []

            # "buffer" type handler (one type of handler per name and per environment).
            type_buffer:          []

            # "deduplication" type handler (one type of handler per name and per environment).
            type_deduplication:   []

            # "group" type handler (one type of handler per name and per environment).
            type_group:           []

            # "whatfailuregroup" type handler (one type of handler per name and per environment).
            type_whatfailuregroup: []

            # "fallbackgroup" type handler (one type of handler per name and per environment).
            type_fallbackgroup:   []

            # "syslog" type handler (one type of handler per name and per environment).
            type_syslog:          []

            # "syslogudp" type handler (one type of handler per name and per environment).
            type_syslogudp:       []

            # "swift_mailer" type handler (one type of handler per name and per environment).
            type_swift_mailer:    []

            # "native_mailer" type handler (one type of handler per name and per environment).
            type_native_mailer:   []

            # "symfony_mailer" type handler (one type of handler per name and per environment).
            type_symfony_mailer:  []

            # "verbosity_levels" type handler (one type of handler per name and per environment).
            type_verbosity_levels:
                verbosity_levels:
                    VERBOSITY_QUIET:      ERROR
                    VERBOSITY_NORMAL:     WARNING
                    VERBOSITY_VERBOSE:    NOTICE
                    VERBOSITY_VERY_VERBOSE: INFO
                    VERBOSITY_DEBUG:      DEBUG

            # "channels" type handler (one type of handler per name and per environment).
            type_channels:
                channels:
                    type:                 ~
                    elements:             []

            # "socket" type handler (one type of handler per name and per environment).
            type_socket:          []

            # "pushover" type handler (one type of handler per name and per environment).
            type_pushover:        []

            # "raven" type handler (one type of handler per name and per environment).
            type_raven:           []

            # "sentry" type handler (one type of handler per name and per environment).
            type_sentry:          []

            # "newrelic" type handler (one type of handler per name and per environment).
            type_newrelic:        []

            # "hipchat" type handler (one type of handler per name and per environment).
            type_hipchat:         []

            # "slack" type handler (one type of handler per name and per environment).
            type_slack:           []

            # "slackwebhook" type handler (one type of handler per name and per environment).
            type_slackwebhook:    []

            # "slackbot" type handler (one type of handler per name and per environment).
            type_slackbot:        []

            # "cube" type handler (one type of handler per name and per environment).
            type_cube:            []

            # "amqp" type handler (one type of handler per name and per environment).
            type_amqp:            []

            # "error_log" type handler (one type of handler per name and per environment).
            type_error_log:       []

            # "null" type handler (one type of handler per name and per environment).
            type_null:            []

            # "test" type handler (one type of handler per name and per environment).
            type_test:            []

            # "debug" type handler (one type of handler per name and per environment).
            type_debug:           []

            # "loggly" type handler (one type of handler per name and per environment).
            type_loggly:          []

            # "logentries" type handler (one type of handler per name and per environment).
            type_logentries:      []

            # "insightops" type handler (one type of handler per name and per environment).
            type_insightops:      []

            # "flowdock" type handler (one type of handler per name and per environment).
            type_flowdock:        []

            # "rollbar" type handler (one type of handler per name and per environment).
            type_rollbar:         []

            # "server_log" type handler (one type of handler per name and per environment).
            type_server_log:      []

            # "telegram" type handler (one type of handler per name and per environment).
            type_telegram:        []

            # "sampling" type handler (one type of handler per name and per environment).
            type_sampling:        []

            # "service" type handler (one type of handler per name and per environment).
            type_service:         []

