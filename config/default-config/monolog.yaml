# Default configuration for extension with alias: "monolog"
monolog:
    use_microseconds:     true
    channels:             []
    handlers:

        # Examples:
        # syslog:              { type: stream, path: /var/log/symfony.log, level: ERROR, bubble: 'false', formatter: my_formatter }
        # main:                { type: fingers_crossed, action_level: WARNING, buffer_size: 30, handler: custom }
        # custom:              { type: service, id: my_handler }

        # Prototype
        name:
            type:                 ~ # Required
            id:                   ~
            app_name:             null
            fill_extra_context:   false
            process_psr_3_messages:
                enabled:              null
                date_format:          ~
                remove_used_context_fields: ~
            path:                 '%kernel.logs_dir%/%kernel.environment%.log'
            file_permission:      null
            use_locking:          false
            filename_format:      '{filename}-{date}'
            date_format:          Y-m-d
            ident:                false
            logopts:              1
            facility:             user
            max_files:            0
            action_level:         WARNING
            activation_strategy:  null
            stop_buffering:       true
            passthru_level:       null
            excluded_404s:        []
            excluded_http_codes:

                # Prototype
                -
                    code:                 ~
                    urls:                 []
            accepted_levels:      []
            min_level:            DEBUG
            max_level:            EMERGENCY
            buffer_size:          0
            flush_on_overflow:    false
            handler:              ~
            url:                  ~
            exchange:             ~
            exchange_name:        log
            room:                 ~
            message_format:       text
            api_version:          null
            channel:              null
            bot_name:             Monolog
            use_attachment:       true
            use_short_attachment: false
            include_extra:        false
            icon_emoji:           null
            webhook_url:          ~
            team:                 ~
            notify:               false
            nickname:             Monolog
            token:                ~
            region:               ~
            source:               ~
            use_ssl:              true
            user:                 ~
            title:                null
            host:                 null
            port:                 514
            config:               []
            members:              []
            connection_string:    ~
            timeout:              ~
            time:                 60
            deduplication_level:  400
            store:                null
            connection_timeout:   ~
            persistent:           ~
            dsn:                  ~
            hub_id:               null
            client_id:            null
            auto_log_stacks:      false
            release:              null
            environment:          null
            message_type:         0
            parse_mode:           null
            disable_webpage_preview: null
            disable_notification: null
            split_long_messages:  false
            delay_between_messages: false
            factor:               1
            tags:                 []

            # Defines the processing order; handlers with a higher priority value are executed first.
            priority:             0

            # Level name or int value, defaults to DEBUG.
            level:                DEBUG

            # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
            bubble:               true

            # When true, a full stack trace is included in the log record, especially for errors and exceptions.
            include_stacktraces:  false

            # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
            nested:               false

            # The formatter used to format the log records. Can be a service ID or a formatter configuration.
            formatter:            ~
            console_formater_options: ~ # Deprecated (Since symfony/monolog-bundle 3.7: "monolog.handlers.name.console_formater_options" is deprecated, use "monolog.handlers.name.console_formatter_options" instead.)
            console_formatter_options: []
            publisher:
                id:                   ~
                hostname:             ~
                port:                 12201
                chunk_size:           1420
            mongo:
                id:                   ~
                host:                 ~
                port:                 27017
                user:                 ~
                pass:                 ~
                database:             monolog
                collection:           logs
            elasticsearch:
                id:                   ~
                host:                 ~
                port:                 9200
                transport:            Http
                user:                 null
                password:             null
            index:                monolog
            document_type:        logs
            ignore_error:         false
            redis:
                id:                   ~
                host:                 ~
                password:             null
                port:                 6379
                database:             0
                key_name:             monolog_redis
            predis:
                id:                   ~
                host:                 ~
            from_email:           ~
            to_email:             []
            subject:              ~
            content_type:         null
            mailer:               null
            email_prototype:
                id:                   ~ # Required
                method:               null
            lazy:                 true
            headers:              []
            verbosity_levels:
                VERBOSITY_QUIET:      ERROR
                VERBOSITY_NORMAL:     WARNING
                VERBOSITY_VERBOSE:    NOTICE
                VERBOSITY_VERY_VERBOSE: INFO
                VERBOSITY_DEBUG:      DEBUG
            channels:
                type:                 ~
                elements:             []

            # Define a "stream" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to a specified stream or file.
            type_stream:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                path:                 '%kernel.logs_dir%/%kernel.environment%.log'
                file_permission:      null
                use_locking:          false

            # Define a "console" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to the console (Symfony Console output).
            type_console:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                console_formatter_options: []

            # Define a "firephp" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to FirePHP in the browser console.
            type_firephp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "browser_console" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to the browser JavaScript console.
            type_browser_console:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "gelf" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to a Graylog Extended Log Format (GELF) server.
            type_gelf:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                publisher:
                    id:                   ~
                    hostname:             ~
                    port:                 12201
                    chunk_size:           1420

            # Define a "chromephp" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to the ChromePHP extension.
            type_chromephp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "rotating_file" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to files that are rotated daily.
            type_rotating_file:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "mongo" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to a MongoDB database.
            type_mongo:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                mongo:
                    id:                   ~
                    host:                 ~
                    port:                 27017
                    user:                 ~
                    pass:                 ~
                    database:             monolog
                    collection:           logs

            # Define a "elasticsearch" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to an Elasticsearch server.
            type_elasticsearch:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                elasticsearch:
                    id:                   ~
                    host:                 ~
                    port:                 9200
                    transport:            Http
                    user:                 null
                    password:             null
                index:                monolog
                document_type:        logs
                ignore_error:         false

            # Define a "elastica" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to an Elasticsearch server using the Elastica client.
            type_elastica:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "redis" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to a Redis server.
            type_redis:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                redis:
                    id:                   ~
                    host:                 ~
                    password:             null
                    port:                 6379
                    database:             0
                    key_name:             monolog_redis

            # Define a "predis" handler (one type of handler per name and per environment).
            # This is an output handler that writes log records to a Redis server using Predis.
            type_predis:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                predis:
                    id:                   ~
                    host:                 ~

            # Define a "fingers_crossed" handler (one type of handler per name and per environment).
            # This is a buffering wrapper handler that buffers log records and flushes them to a nested handler when a specific action level is reached. It requires a nested handler.
            type_fingers_crossed:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "filter" handler (one type of handler per name and per environment).
            # This is a filtering wrapper handler that passes log records to a nested handler only if their level matches predefined criteria. It requires a nested handler.
            type_filter:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "buffer" handler (one type of handler per name and per environment).
            # This is a buffering wrapper handler that accumulates log records and flushes them to a nested handler under specific conditions (e.g., buffer full, shutdown). It requires a nested handler.
            type_buffer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "deduplication" handler (one type of handler per name and per environment).
            # This is a deduplication wrapper handler that prevents duplicate log records from being sent to a nested handler within a defined time frame. It requires a nested handler.
            type_deduplication:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "group" handler (one type of handler per name and per environment).
            # This is a grouping wrapper handler that sends all log records to multiple nested handlers simultaneously. It requires one or more nested handlers.
            type_group:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "whatfailuregroup" handler (one type of handler per name and per environment).
            # This is a grouping wrapper handler that attempts to send log records to the first working nested handler in a list, falling back to others if failures occur. It requires one or more nested handlers.
            type_whatfailuregroup:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "fallbackgroup" handler (one type of handler per name and per environment).
            # This is a grouping wrapper handler that sends log records to the first nested handler, and if it fails, falls back to the next, similar to WhatFailureGroupHandler. It requires one or more nested handlers.
            type_fallbackgroup:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "syslog" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to the syslogd system logger.
            type_syslog:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "syslogudp" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to a remote syslogd server via UDP.
            type_syslogudp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "swift_mailer" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records via SwiftMailer.
            type_swift_mailer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                from_email:           ~
                to_email:             []
                subject:              ~
                content_type:         null
                mailer:               null
                email_prototype:
                    id:                   ~ # Required
                    method:               null
                lazy:                 true

            # Define a "native_mailer" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records via PHP's native mail() function.
            type_native_mailer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                from_email:           ~
                to_email:             []
                subject:              ~
                headers:              []

            # Define a "symfony_mailer" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records via Symfony Mailer.
            type_symfony_mailer:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                from_email:           ~
                to_email:             []
                subject:              ~
                content_type:         null
                headers:              []
                mailer:               null
                email_prototype:
                    id:                   ~ # Required
                    method:               null

            # Define a "verbosity_levels" handler (one type of handler per name and per environment).
            # This is a filtering wrapper handler that only activates a nested handler if the Symfony Console verbosity level is sufficient. It requires a nested handler.
            type_verbosity_levels:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                verbosity_levels:
                    VERBOSITY_QUIET:      ERROR
                    VERBOSITY_NORMAL:     WARNING
                    VERBOSITY_VERBOSE:    NOTICE
                    VERBOSITY_VERY_VERBOSE: INFO
                    VERBOSITY_DEBUG:      DEBUG

            # Define a "channels" handler (one type of handler per name and per environment).
            # This is a filtering wrapper handler that passes log records to a nested handler only if they belong to specific Monolog channels. It requires a nested handler.
            type_channels:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~
                channels:
                    type:                 ~
                    elements:             []

            # Define a "socket" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records over a network socket.
            type_socket:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "pushover" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records as Pushover notifications.
            type_pushover:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "raven" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to a Sentry server (Raven client).
            type_raven:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "sentry" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to a Sentry server (Sentry SDK).
            type_sentry:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "newrelic" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to New Relic.
            type_newrelic:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "hipchat" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to HipChat.
            type_hipchat:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "slack" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Slack via a custom API token.
            type_slack:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "slackwebhook" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Slack via a webhook.
            type_slackwebhook:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "slackbot" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Slack via a Slackbot integration.
            type_slackbot:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "cube" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to a Cube server.
            type_cube:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "amqp" handler (one type of handler per name and per environment).
            # This is an output handler that publishes log records to an AMQP exchange.
            type_amqp:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "error_log" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to PHP's error_log function.
            type_error_log:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "null" handler (one type of handler per name and per environment).
            # This is an output handler that discards all log records, effectively doing nothing.
            type_null:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "test" handler (one type of handler per name and per environment).
            # This is an output handler primarily used for testing, collecting log records in memory.
            type_test:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "debug" handler (one type of handler per name and per environment).
            # This is an output handler that sends all log records to the Symfony debug bar.
            type_debug:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "loggly" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Loggly.
            type_loggly:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "logentries" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Logentries.
            type_logentries:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "insightops" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to InsightOps (formerly Logentries).
            type_insightops:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "flowdock" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Flowdock.
            type_flowdock:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "rollbar" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to Rollbar.
            type_rollbar:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "server_log" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records to the Symfony VarDumper server for real-time debugging.
            type_server_log:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "telegram" handler (one type of handler per name and per environment).
            # This is an output handler that sends log records as Telegram messages.
            type_telegram:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "sampling" handler (one type of handler per name and per environment).
            # This is a sampling wrapper handler that only passes a fraction of log records to a nested handler based on a configured factor. It requires a nested handler.
            type_sampling:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

            # Define a "service" handler (one type of handler per name and per environment).
            # This is an output handler that references an existing service as the Monolog handler.
            type_service:

                # Defines the processing order; handlers with a higher priority value are executed first.
                priority:             0

                # Level name or int value, defaults to DEBUG.
                level:                DEBUG

                # When true, messages are passed to the next handler in the stack; when false, the chain ends here.
                bubble:               true

                # When true, a full stack trace is included in the log record, especially for errors and exceptions.
                include_stacktraces:  false

                # When true, this handler is part of a nested handler configuration (e.g., as the primary handler of a FingersCrossedHandler).
                nested:               false

                # The formatter used to format the log records. Can be a service ID or a formatter configuration.
                formatter:            ~

